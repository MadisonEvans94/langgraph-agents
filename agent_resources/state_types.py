# agent_resources/state_types.py

from typing import Any, List, Dict, Optional
from typing_extensions import Annotated, TypedDict
from langgraph.managed import IsLastStep, RemainingSteps
from langgraph.graph.message import add_messages
from langchain_core.messages import BaseMessage, AnyMessage
from langchain.schema import Document

class Task(TypedDict):
    """A single unit of work in the orchestrator."""
    id: int
    description: str
    assigned_to: str        # "math_agent" or "web_search_agent"
    status: str             # "pending" | "done" | "error"
    result: Optional[str]
    depends_on: List[int]   # prerequisite task IDs

class MarketingAgentState(TypedDict, total=False):
    """
    State schema for the AnalysisAgent's marketing workflow.

    Fields:
        messages: Annotated list of messages (AnyMessage) persisted through the agent for context.
        path: Filesystem path to the input PDF or text document being analyzed.
        chunks: List of Document objects representing text chunks extracted from the document.
        summary: String containing the executive summary generated from all chunks.
        key_points: List of concise key point phrases extracted from the summary.
        domain: One- or two-word label classifying the document's primary domain (e.g., "technology").
    """
    messages: Annotated[List[AnyMessage], add_messages]
    path: str
    chunks: List[Document]
    summary: str
    key_points: List[str]
    domain: str

class ImageSearchAgentState(TypedDict, total=False):
    """
    State for ImageSearchAgent.

    Fields:
      summary: the paragraph to base the search query on.
      query:   the 3-word search query generated by the LLM.
      images:  list of returned image URLs.
      messages: chat history if you ever need it.
    """
    summary: str
    query: str
    images: List[str]
    messages: List[AnyMessage]

class SupervisorAgentState(TypedDict, total=False):
    """
    Top-level state for the SupervisorAgent, orchestrating analysis + image search.

    Fields:
      messages: Annotated[List[AnyMessage], add_messages]  # persisted chat context across the whole flow
      path: str                                           # input PDF filepath
      analysis: MarketingAgentState                       # sub-state from the AnalysisAgent
      image_query: str                                    # generated image search query
      images: ImageSearchAgentState                       # sub-state from the ImageSearchAgent
      output_payload: Dict[str, Any]                      # final aggregated payload for downstream use
    """
    messages: Annotated[List[AnyMessage], add_messages]
    path: str
    analysis: MarketingAgentState
    image_query: str
    images: ImageSearchAgentState
    output_payload: Dict[str, Any]