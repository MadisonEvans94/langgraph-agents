from typing import Any, List, Dict
from typing_extensions import Annotated, TypedDict
from langgraph.graph.message import add_messages
from langchain_core.messages import AnyMessage
from langchain.schema import Document

class AnalysisAgentState(TypedDict, total=False):
    """
    State schema for the AnalysisAgent's marketing workflow.

    Fields:
        messages: Annotated list of messages (AnyMessage) persisted through the agent for context.
        path: Filesystem path to the input PDF or text document being analyzed.
        chunks: List of Document objects representing text chunks extracted from the document.
        summary: String containing the executive summary generated from all chunks.
        key_points: List of concise key point phrases extracted from the summary.
        domain: One- or two-word label classifying the document's primary domain (e.g., "technology").
    """
    messages: Annotated[List[AnyMessage], add_messages]
    path: str
    chunks: List[Document]
    summary: str
    key_points: List[str]
    domain: str

class ImageAgentState(TypedDict, total=False):
    """
    State for ImageAgent.

    Fields:
      summary: the paragraph to base the search query on.
      query:   the 3-word search query generated by the LLM.
      images:  list of returned image URLs.
      messages: chat history if you ever need it.
    """
    summary: str
    query: str
    images: List[str]
    image_query: str
    messages: Annotated[List[AnyMessage], add_messages]

class HTMLAgentState(TypedDict, total=False):
    messages: Annotated[List[AnyMessage], add_messages]
    image_url: str
    summary: str
    html: str

class SupervisorAgentState(TypedDict, total=False):
    messages: Annotated[List[AnyMessage], add_messages]
    analysis: AnalysisAgentState
    image_query: str
    images: List[str]
    html: str  # add this if not already present
